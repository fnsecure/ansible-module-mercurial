#!/usr/bin/python
"""Deploys software (or files) from mercurial clones.

See accompanying README.md for details.

(c) 2012, Brad Olson
Hevily derived from Ansible's git module, (c) 2012, Michael DeHaan <michael.dehaan@gmail.com>

This file is part of Ansible

Ansible is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Ansible is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
"""

try:
    import json
except ImportError:
    import simplejson as json

import sys, os, shlex, syslog, subprocess
from os.path import abspath, expanduser, exists, isfile, join

params = {}
msg=""

def exit_json(rc=0, **kwargs):
    if 'name' in kwargs:
        add_user_info(kwargs)
    print json.dumps(kwargs)
    sys.exit(rc)

def fail_json(**kwargs):
    kwargs['failed'] = True
    exit_json(rc=1, **kwargs)

def get_params():
    """Startup tasks and read params.

    :return: parameters as dictionary.
    """
    global msg

    msg = "reading params"
    with file(sys.argv[1]) as f:            #read the args file
        args = f.read()

    msg = "writing syslog."
    syslog.openlog('ansible-%s' % os.path.basename(__file__))
    syslog.syslog(syslog.LOG_NOTICE, 'Invoked with %s' % args)

    msg = "parsing params"
    params = dict(                            # make a dictionary of...
        [ arg.split("=", 1)                 # assignment pairs IMPORTANT to only split to first '='!
          for arg in shlex.split(args)  # using shell lexing
          if "=" in arg                     # ignoring tokens without assignment
        ])

    return params

def run( cmd, cwd=None, user=None):
    """Run a command.

    :param str|list cmd: command and arguments
    :param str cwd: if given, change current working directory before running. BUG: doesn't work with su, probably need cd X &&
    :param str user: if given, use 'su' to run the command as another user.
    :return: tuple of command results (exit_code, stdout, stderr)
    """
    if user:
        if cwd:
            cmd = "cd %s && %s" % (cwd,cmd)
            cwd = None
        cmd = "su %s -lc '%s'" % (user, cmd)
    syslog.syslog(syslog.LOG_DEBUG, 'Ansible running %s' % cmd)
    p = subprocess.Popen(cmd, cwd=cwd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    out, err = p.communicate()
    rc = p.returncode
    if  rc != 0:
        log = "Ansible mecurial module failed running %s. Return code: %d. Stdout: '%s'. Stderr: '%s'. CWD: '%s'."
        log %= cmd, rc, out, err, cwd
        syslog.syslog(syslog.LOG_ERR, log)
        raise Exception(log)
    return (rc, out, err)

def ensure_working_copy( params):
    """Clone a mercurial repository if it doesn't exist.
    Pull changes
    Update to desired tag, branch, revision.
    """
    global msg

    hg = "/usr/bin/hg " #mercurial command, probably should check if it's there
    #== Scrub Parameters
    msg = "missing param: dest" 
    dest = params["dest"]
    msg = "missing param: repo" 
    repo = params["repo"]
    owner = params.get("owner", None)
    rev = params.get("revision", "default")
    debug = params.get("debug", False) #ANYTHING for debug enables it (even "debug=False") !
    keyfile = params.get("keyfile",None) #will use .ssh/id_rsa by default

    #== Clone new local repository or pull changes to existing.
    msg = "calculating destination path from %s" % dest

    dest = abspath( expanduser( dest))
    history = join( dest,".hg")
    msg = "creating destination path %s" % dest
    try:
        os.makedirs(dest)
    except OSError, e:
        if e.errno==17: 
            pass #ignore directory exists errors
        else:
            raise 

    # handle custom ssh keyfile
    options = " "
    if repo.startswith("ssh://") and params["keyfile"]:
        options += "--ssh '/usr/bin/ssh -i %(keyfile)s' " % params

    if not exists(history):
        msg = "cloning %s to %s" % (repo, dest)
        cmd = hg + "clone %s %s %s" % (options, repo, dest)
        rc, out, err = run(cmd, user=owner)
    else:
        # Assumes paths.default set correctly in repo's .hg/hgrc
        # TODO: could confirm that with regex and 'hg paths'. Or could do explicit pull.
        msg = "pulling changes from %s to %s" % (repo, dest)
        rc, out, err = run( hg + "pull " + options, cwd=dest, user=owner)

    #== Update to revision.
    msg = "updating to revision %s" % rev
    rc, out, err = run(hg + "up -C "  + rev, cwd=dest, user=owner)

    return True

#===== MAIN SCRIPT ===================================================

try:
    params = get_params()
    changed = ensure_working_copy( params)
    msg = ""
except:
    msg = "Error %s" % msg

# Don't do json exits within try...except. Need a clean way to not catch their sys.exit()
if msg:
    syslog.syslog(syslog.LOG_ERR, "Ansible error in mercurial module: " + msg)
    if params.get("debug",False):
        import traceback
        fail_json(msg=msg, traceback=traceback.format_exc())
    else:
        fail_json(msg=msg)
else:
    exit_json( dest=params["dest"], changed=changed)
    
